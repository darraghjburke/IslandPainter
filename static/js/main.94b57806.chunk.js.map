{"version":3,"sources":["logo.svg","SceneComponent.tsx","schema/MyRoomState.ts","schema/WorldObjects.ts","TilePanel.tsx","Chat.tsx","Help.tsx","Game.tsx","App.js","reportWebVitals.js","index.js"],"names":["props","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","rest","onSceneReady","useEffect","current","engine","Engine","scene","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","getEngine","window","addEventListener","dispose","removeEventListener","ref","Color3","type","Schema","Player","Building","Tile","Message","MyRoomState","ArraySchema","terrainTypes","name","color","asset","buildingTypes","probability","TilePanel","useState","rotation","setRotationLocal","height","setHeightLocal","tile","building","id","map","index","onClick","setTerrainType","className","terrainType","style","backgroundColor","htmlFor","step","min","max","value","onChange","ev","setHeight","updateHeight","parseFloat","target","Math","PI","setRotation","updateRotation","demolishBuilding","includes","buildBuilding","text","setText","console","log","players","length","player","r","g","b","messages","message","onSubmit","event","preventDefault","sendMessage","autoComplete","Help","visible","setVisible","href","GameObject","glb","assetManager","parentMesh","this","loadMesh","a","addMeshTask","process","getFolder","onSuccess","task","loadedMeshes","position","z","TerrainType","focusedKey","setFocusedKey","roomState","setRoomState","React","updateState","forceUpdate","useCallback","room","setRoom","terrains","buildings","AssetsManager","forEach","push","loadAsync","connect","getPixelFromHex","col","row","sqrt","Colyseus","joinOrCreate","then","sessionId","onStateChange","state","cx","cy","cameras","set","radius","tiles","onAdd","key","width","floor","getCoords","x","y","transformNode","TransformNode","metadata","terrainMesh","clone","setEnabled","isPickable","buildingNode","buildingMesh","listen","currentValue","previousValue","animation","Animation","CreateAndStartAnimation","loopAnimation","onAnimationEndObservable","add","eventData","parent","onPointerObservable","pointerInfo","PointerEventTypes","POINTERDOWN","pickInfo","pickedMesh","keyNode","catch","e","SceneComponent","loadGameData","camera","ArcRotateCamera","Vector3","setTarget","Zero","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","send","Chat","App","Game","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"2UAAe,I,qOCGA,YAACA,GACd,IAAMC,EAAcC,kBAAO,MACnBC,EAAgGH,EAAhGG,UAAWC,EAAqFJ,EAArFI,cAAeC,EAAsEL,EAAtEK,mBAAoBC,EAAkDN,EAAlDM,aAAcC,EAAoCP,EAApCO,SAA2BC,GAASR,EAA1BS,aAA9E,aAAwGT,EAAxG,KAqCA,OAnCAU,sBAAU,WACR,GAAIT,EAAYU,QAAS,CACvB,IAAMC,EAAS,IAAIC,UAAOZ,EAAYU,QAASR,EAAWC,EAAeC,GACnES,EAAQ,IAAIC,SAAMH,EAAQN,GAC5BQ,EAAME,UACRhB,EAAMS,aAAaK,GAEnBA,EAAMG,kBAAkBC,SAAQ,SAACJ,GAAD,OAAWd,EAAMS,aAAaK,MAGhEF,EAAOO,eAAc,WACK,oBAAbZ,GACTA,EAASO,GAEXA,EAAMM,YAGR,IAAMC,EAAS,WACbP,EAAMQ,YAAYD,UAOpB,OAJIE,QACFA,OAAOC,iBAAiB,SAAUH,GAG7B,WACLP,EAAMQ,YAAYG,UAEdF,QACFA,OAAOG,oBAAoB,SAAUL,OAI1C,CAACpB,IAEG,sCAAQ0B,IAAK1B,GAAiBO,K,6CClC1BoB,IANb,EACGC,gBAAK,UADR,EAEGA,gBAAK,UAFR,EAGGA,gBAAK,UAHR,8UAA6BC,WAA7B,4GAC8B,KAD9B,4GAE8B,KAF9B,4GAG8B,KAG9B,EACGD,gBAAK,UADR,EAEGA,gBAAK,UAFR,EAGGA,gBAAK,UAHR,8UAA4BC,WAA5B,4GAC8B,KAD9B,4GAE8B,KAF9B,4GAG8B,KAH9B,GAMaC,IAAb,EACGF,gBAAK,UADR,EAEGA,gBAAKD,IAFR,EAGGC,gBAAK,UAHR,sVAA4BC,WAA5B,8SAMaE,IAAb,EACGH,gBAAK,UADR,EAEGA,gBAAK,UAFR,kTAA8BC,WAA9B,+GACiC,KADjC,mHAEqC,KAFrC,GAKaG,IAAb,EACGJ,gBAAK,UADR,EAEGA,gBAAK,UAFR,EAGGA,gBAAKG,IAHR,oWAA0BF,WAA1B,sHACwC,KADxC,iHAEmC,KAFnC,mHAGwC,QAHxC,GAMaI,IAAb,EACGL,gBAAK,UADR,EAEGA,gBAAKD,IAFR,EAGGC,gBAAK,UAHR,2VAA6BC,WAA7B,8GACiC,MADjC,sNAGqC,MAHrC,GAMaK,IAAb,EACGN,gBAAK,CAACE,KADT,EAEGF,gBAAK,UAFR,EAGGA,gBAAK,UAHR,EAIGA,gBAAK,CAACI,KAJT,EAKGJ,gBAAK,UALR,EAMGA,gBAAK,CAACK,KANT,+dAAiCJ,WAAjC,kHAC4B,IAAIM,kBADhC,gHAEkC,MAFlC,iHAGmC,MAHnC,gHAIwB,IAAIA,kBAJ5B,+GAKiC,MALjC,oHAM8B,IAAIA,kBANlC,GCzBaC,I,cAAe,CACxB,CACIC,KAAM,QACNC,MAAO,UACPC,MAAO,cAEX,CACIF,KAAM,QACNC,MAAO,UACPC,MAAO,aAEX,CACIF,KAAM,OACNC,MAAO,UACPC,MAAO,YAEX,CACIF,KAAM,OACNC,MAAO,UACPC,MAAO,cAIFC,GAAiC,CAC1C,CACIH,KAAM,SACND,aAAc,CAAC,GACfG,MAAO,UACPE,YAAa,IAGjB,CACIJ,KAAM,mBACND,aAAc,CAAC,GACfG,MAAO,UACPE,YAAa,IAEjB,CACIJ,KAAM,WACND,aAAc,CAAC,EAAE,EAAE,GACnBG,MAAO,WACPE,YAAa,KAEjB,CACIJ,KAAM,QACND,aAAc,CAAC,EAAE,GACjBG,MAAO,QACPE,YAAa,KAEjB,CACIJ,KAAM,OACND,aAAc,CAAC,GACfG,MAAO,YACPE,YAAa,KAEjB,CACIJ,KAAM,OACND,aAAc,CAAC,EAAE,EAAE,GACnBG,MAAO,OACPE,YAAa,KAEjB,CACIJ,KAAM,SACND,aAAc,CAAC,EAAE,EAAE,GACnBG,MAAO,SACPE,YAAa,KAEjB,CACIJ,KAAM,WACND,aAAc,CAAC,EAAE,EAAE,GACnBG,MAAO,OACPE,YAAa,MAEjB,CACIJ,KAAM,aACND,aAAc,CAAC,GACfG,MAAO,aACPE,YAAa,KAEjB,CACIJ,KAAM,WACND,aAAc,CAAC,EAAE,EAAE,GACnBG,MAAO,WACPE,YAAa,KAEjB,CACIJ,KAAM,gBACND,aAAc,CAAC,EAAE,EAAE,GACnBG,MAAO,eACPE,YAAa,KAEjB,CACIJ,KAAM,aACND,aAAc,CAAC,EAAE,EAAE,GACnBG,MAAO,aACPE,YAAa,KAEjB,CACIJ,KAAM,SACND,aAAc,CAAC,EAAE,EAAE,GACnBG,MAAO,SACPE,YAAa,MAEjB,CACIJ,KAAM,SACND,aAAc,CAAC,GACfG,MAAO,SACPE,YAAa,ICxGN,SAASC,GAAU3C,GAC9B,MAAoC4C,oBAAS,GAA7C,oBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,oBAAS,GAAzC,oBAAOG,EAAP,KAAcC,EAAd,KAEAtC,sBAAU,WACNsC,EAAehD,EAAMiD,KAAOjD,EAAMiD,KAAKF,OAAS,GAC5C/C,EAAMiD,MAAQjD,EAAMiD,KAAKC,UACzBJ,EAAiB9C,EAAMiD,KAAKC,SAASL,YAE1C,CAAC7C,EAAMiD,OAYV,OAAKjD,EAAMiD,KACJ,uBAAKE,GAAG,aAAR,UACH,sBAAKA,GAAG,eAAR,SACKd,GAAae,KAAI,SAACvB,EAAMwB,GAAP,OAAiB,yBAAQC,QAAS,kBAAMtD,EAAMuD,eAAeF,IAAQG,UAAWxD,EAAMiD,KAAKQ,aAAeJ,EAAQ,mBAAqB,UAAYK,MAAO,CAACC,gBAAiB9B,EAAKU,cAEvM,wBACA,uBAAKY,GAAK,SAAV,UACI,+BAAK,wBAAOS,QAAQ,SAAf,sBACL,wBAAO/B,KAAK,QAAQgC,KAAK,OAAOC,IAAI,IAAIC,IAAI,IAAIC,MAAOjB,EAAQkB,SAAU,SAAAC,GAAE,OAlB9D,SAACnB,GAClBC,EAAeD,GACf/C,EAAMmE,UAAUpB,GAgBmEqB,CAAaC,WAAWH,EAAGI,OAAON,SAASb,GAAG,cAEjI,wBACGnD,EAAMiD,KAAKC,SAMV,uBAAKC,GAAG,WAAR,UACI,8BAAKV,GAAczC,EAAMiD,KAAKC,SAASrB,MAAMS,OAC7C,+BAAK,wBAAOsB,QAAQ,WAAf,wBACL,wBAAO/B,KAAK,QAAQiC,IAAI,IAAIC,IAAK,EAAEQ,KAAKC,GAAIX,KAAM,GAAKG,MAAOnB,EAAUoB,SAAU,SAAAC,GAAE,OAzBzE,SAACrB,GACpBC,EAAiBD,GACjB7C,EAAMyE,YAAY5B,GAuB8E6B,CAAeL,WAAWH,EAAGI,OAAON,SAASb,GAAG,aACxI,yBAAQG,QAAStD,EAAM2E,iBAAvB,kCATJ,uBAAKxB,GAAG,cAAR,UACI,wCACCV,GAAcW,KAAI,SAACvB,EAAMwB,GAAP,OAAiBxB,EAAKQ,aAAauC,SAAS5E,EAAMiD,KAAKQ,aAAe,yBAAQH,QAAS,kBAAMtD,EAAM6E,cAAcxB,IAA3C,SAAoDxB,EAAKS,OAAiB,wCAdvJ,sBAAKa,GAAG,aAAaK,UAAU,SCjC5C,gBAACxD,GACZ,MAAuB4C,oBAAS,IAAhC,oBAAOkC,EAAP,KAAYC,EAAZ,KACAC,QAAQC,IAAI,UAAWjF,EAAMkF,SAO7B,OAAO,uBAAK/B,GAAG,aAAR,UACH,uBAAKA,GAAG,iBAAR,UACI,sBAAIA,GAAG,eAAP,6BAAuCnD,EAAMkF,QAAQC,UAErDnF,EAAMkF,QAAQ9B,KAAI,SAAAgC,GAAM,OAAG,sBAAqB5B,UAAU,cAAcE,MAAO,CAACnB,MAAM,OAAD,OAA0B,IAAjB6C,EAAO7C,MAAM8C,EAAtB,YAAkD,IAAjBD,EAAO7C,MAAM+C,EAA9C,YAA0E,IAAjBF,EAAO7C,MAAMgD,EAAtE,MAA1D,SAA8IH,EAAO9C,MAA3I8C,EAAOjC,UAGhD,wBACA,uBAAKA,GAAG,OAAR,UACI,uBAAKA,GAAG,WAAR,UACA,uCACKnD,EAAMwF,SAASpC,KAAI,SAAAqC,GAAO,OAAI,iCAAK,uBAAMjC,UAAU,cAAcE,MAAO,CAACnB,MAAM,OAAD,OAA2B,IAAlBkD,EAAQlD,MAAM8C,EAAvB,YAAoD,IAAlBI,EAAQlD,MAAM+C,EAAhD,YAA6E,IAAlBG,EAAQlD,MAAMgD,EAAzE,MAA3C,SAAmIE,EAAQnD,OAAY,gCAAOmD,EAAQA,mBAE9M,wBAAMtC,GAAG,UAAUuC,SAlBP,SAACC,GACjBA,EAAMC,iBACN5F,EAAM6F,YAAYf,GAClBC,EAAQ,KAeJ,UACI,wBAAOe,aAAa,MAAMjE,KAAK,OAAOmC,MAAOc,EAAMb,SAAU,SAACC,GAAD,OAAQa,EAAQb,EAAGI,OAAON,UACvF,qDCzBD,SAAS+B,KACpB,MAA8BnD,qBAAS,GAAvC,oBAAOoD,EAAP,KAAgBC,EAAhB,KACA,OAAO,uCACFD,EACD,uBAAK7C,GAAG,WAAR,UACI,6CAAc,oBAAG+C,KAAK,yBAAR,2BACd,mDAAoB,oBAAGA,KAAK,2BAAR,yBACpB,6CAAc,oBAAGA,KAAK,qCAAR,8BACd,uDAAwB,oBAAGA,KAAK,2DAAR,0BAAxB,wBACA,yBAAQ5C,QAAS,kBAAM2C,GAAW,IAAlC,kBAEF,+BACF,yBAAQ3C,QAAS,kBAAM2C,GAAYD,IAAU7C,GAAG,cAAhD,kB,ICAFgD,G,WAGF,WAAYC,EAAaC,GAA8B,0BAFvDC,gBAEsD,EAClDC,KAAKC,SAASJ,EAAKC,G,sFAEvB,WAAeD,EAAaC,GAA5B,qBAAAI,EAAA,sDASiBJ,EAAaK,YAAY,OAAQ,GAAjC,UAAwCC,GAAxC,mBAAyEJ,KAAKK,YAA9E,eAAiGR,EAAjG,SACRS,UAAY,SAACC,GACd,EAAKR,WAAaQ,EAAKC,aAAa,GACpC,EAAKT,WAAWU,SAASC,EAAI,KAZrC,gD,gFAkBA,WACI,MAAO,O,KAITC,G,mKACF,WACI,MAAO,Y,GAFWf,IAMpBnE,G,mKACF,WACI,MAAO,gB,GAFQmE,IAMR,cACX,MAAoCvD,qBAAU,GAA9C,oBAAOuE,EAAP,KAAmBC,EAAnB,KACA,EAAkCxE,oBAAS,IAAIT,IAA/C,oBAAOkF,EAAP,KAAkBC,EAAlB,KACA,EAA6BC,KAAM3E,SAAS,IAA5C,oBAAc4E,GAAd,WACMC,EAAcF,KAAMG,aAAY,kBAAMF,EAAY,MAAK,IAK7D,EAAwB5E,oBAAkC,MAA1D,oBAAO+E,EAAP,KAAaC,EAAb,KACIC,EAA2B,GAC3BC,EAAyB,GAXZ,8CAajB,WAA4BhH,GAA5B,gBAAA2F,EAAA,6DACUJ,EAAe,IAAI0B,iBAAcjH,GACvCuB,GAAa2F,SAAQ,SAAAnG,GACjBgG,EAASI,KAAK,IAAIf,GAAYrF,EAAKW,MAAO6D,OAE9C5D,GAAcuF,SAAQ,SAAAnG,GAClBiG,EAAUG,KAAK,IAAIjG,GAASH,EAAKW,MAAO6D,OANhD,SAQUA,EAAa6B,YARvB,OASIC,EAAQrH,GATZ,4CAbiB,sBAkCjB,SAASsH,EAAgBC,EAAaC,GAElC,MAAO,CADI,KACG/D,KAAKgE,KAAK,GAAKF,EAAM9D,KAAKgE,KAAK,GAAI,EAAID,GAD1C,IACqD,EAAE,EAAIA,GAG1E,SAASH,EAAQrH,GACA,IAAI0H,UAAgB,sCAC1BC,aAAa,WAAWC,MAAK,SAAAf,GAChCC,EAAQD,GACR3C,QAAQC,IAAI0C,EAAKgB,UAAW,SAAUhB,EAAKrF,MAC3CqF,EAAKiB,eAAc,SAACC,GAChBvB,EAAauB,GACbpB,OAEJ,IAAMoB,EAASlB,EAAKkB,MACpB,EAAiBT,EAAgB,KAAQ,MAAzC,oBAAOU,EAAP,KAAWC,EAAX,KACCjI,EAAMkI,QAAQ,GAAuB1E,OAAO2E,IAAIH,EAAG,EAAEC,GACrDjI,EAAMkI,QAAQ,GAAuBE,OAAS,GAE/CL,EAAMM,MAAMC,MAAQ,SAACnG,EAAYoG,GAC7BrE,QAAQC,IAAIhC,EAAKoG,GACjB,MA3BZ,SAAmBA,EAAaC,GAC5B,MAAmB,CAACD,EAAMC,EAAO/E,KAAKgF,MAAMF,EAAMC,IAClD,OAAOlB,EADP,WA0BsBoB,CAAUH,EAAKR,EAAMS,OAAnC,oBAAOG,EAAP,KAASC,EAAT,KACIC,EAAiB,IAAIC,iBAAJ,UAAqBP,GAAOvI,GACjD6I,EAAc3C,SAASiC,IAAIQ,EAAGxG,EAAKF,OAAQ2G,GAC3CC,EAAcE,SAAW,CAACR,OAC1B,IAAIS,EAAcjC,EAAS5E,EAAKQ,aAAa6C,WAAWyD,MAAtC,OAAoDJ,GACtEG,EAAY9C,SAASiC,IAAI,EAAE,EAAE,GAC7Ba,EAAYE,YAAW,GACvBF,EAAYG,YAAa,EACzB,IAAIC,EAA+B,KAC/BC,EAAsB,KAC1BlH,EAAKmH,OAAO,YAAY,SAACC,EAAcC,GACnC,GAAIA,EAAe,CACf,IAAMC,EAAYC,aAAUC,wBAAwB,QAAUP,EAAc,aAAc,GAAI,GAAI,EAAG,GACrGK,EAAUG,eAAgB,EAC1BH,EAAUI,yBAAyBC,KAAI,SAACC,GAAeA,EAAUvG,OAAO7C,aAExE4I,KACAH,EAAe,IAAIN,iBAAc,WAAY9I,IAChCgK,OAASnB,GACtBQ,EAAerC,EAAUuC,EAAaxI,MAAMyE,WAAWyD,MAAxC,WAA0DG,IAC5DlD,SAASiC,IAAI,EAAE,EAAE,GAC9BkB,EAAaH,YAAW,GACNQ,aAAUC,wBAAwB,QAASP,EAAc,aAAc,GAAI,GAAI,EAAG,GAC1FQ,eAAgB,EAC1BzH,EAAKC,SAASkH,OAAO,YAAY,SAACC,EAAcC,GAC5CJ,EAAarH,SAAS6G,EAAIzG,EAAKC,SAASL,gBAIpDI,EAAKmH,OAAO,eAAe,SAACC,EAAcC,GAClCA,GACAR,EAAYrI,UAEZ4I,KACAP,EAAcjC,EAAS5E,EAAKQ,aAAa6C,WAAWyD,MAAtC,OAAoDJ,IACtD3C,SAASiC,IAAI,EAAE,EAAE,GAC7Ba,EAAYE,YAAW,GACvBF,EAAYG,YAAa,MAGjChH,EAAKmH,OAAO,UAAU,SAACC,EAAcC,GACjCX,EAAc3C,SAAS0C,EAAIzG,EAAKF,WAGxCjC,EAAMiK,oBAAoBH,KAAI,SAACI,GAC3B,GAAIA,EAAYnJ,MAAQoJ,qBAAkBC,YACtC,GAAIF,EAAYG,UAAYH,EAAYG,SAASC,WAAY,CAG7D,IAFA,IACIC,EADSL,EAAYG,SAASC,YAE3BC,EAAQxB,WAAawB,EAAQxB,SAASR,KACzCgC,EAAUA,EAAQP,OAEtB,GAAIE,EAAYG,UAAYH,EAAYG,SAASC,WAAY,CAGzD,IAFA,IACIC,EADSL,EAAYG,SAASC,YAE3BC,EAAQxB,WAAawB,EAAQxB,SAASR,KAEzC,KADAgC,EAAUA,EAAQP,QACJ,OAElB1D,EAAciE,EAAQxB,SAASR,WAGnCjC,GAAe,SAKxBkE,OAAM,SAAAC,GACLvG,QAAQC,IAAI,aAAcsG,MAsCpC,OAFEvG,QAAQC,IAAIoC,EAAUnC,SAEjB,iCACL,eAACsG,GAAD,CAAgBrL,WAAS,EAACM,aApCL,SAACK,IA9HL,oCA+Hb2K,CAAa3K,GAGb,IAAM4K,EAAS,IAAIC,mBACf,kBACA,EACApH,KAAKC,GAAK,EACV,GACA,IAAIoH,WAAQ,EAAG,EAAG,GAClB9K,GAIN4K,EAAOG,UAAUD,WAAQE,QAEzB,IAAMC,EAASjL,EAAMQ,YAAY0K,qBAGjCN,EAAOO,cAAcF,GAAQ,GAGjB,IAAIG,oBAAiB,QAAS,IAAIN,WAAQ,EAAG,EAAG,GAAI9K,GAG1DqL,UAAY,IAWkC5L,SAJzC,SAACO,KAI4DqC,GAAG,cAC7E,eAACR,GAAD,CACIM,KAAMoE,EAAU8B,MAAMhC,GACtBxC,iBAAkB,kBAAMgD,EAAKyE,KAAK,WAAY,CAAC/C,IAAKlC,KACpDtC,cAAe,SAAAhD,GAAI,OAAI8F,EAAKyE,KAAK,QAAS,CAAC/C,IAAKlC,EAAYtF,UAC5D0B,eAAgB,SAAA1B,GAAI,OAAI8F,EAAKyE,KAAK,oBAAqB,CAAC/C,IAAKlC,EAAYtF,UACzEsC,UAAW,SAAApB,GAAM,OAAI4E,EAAKyE,KAAK,YAAa,CAAC/C,IAAKlC,EAAYpE,YAC9D0B,YAAa,SAAA5B,GAAQ,OAAI8E,EAAKyE,KAAK,cAAe,CAAC/C,IAAKlC,EAAYtE,gBAExE,eAACwJ,GAAD,CACInH,QAASmC,EAAUnC,QACnBW,YAAa,SAACJ,GAAD,OAAakC,EAAKyE,KAAK,UAAW,CAAC3G,aAChDD,SAAU6B,EAAU7B,WAExB,qBAAIrC,GAAG,aAAP,SAAqBkE,EAAU/E,OAC/B,eAACyD,GAAD,QC5NWuG,OARf,WACE,OACE,sBAAK9I,UAAU,MAAf,SACE,eAAC+I,GAAD,OCKSC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhE,MAAK,YAAkD,IAA/CiE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,KAAS5L,OACP,eAAC,KAAM6L,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BX,O","file":"static/js/main.94b57806.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Engine, Scene } from \"@babylonjs/core\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nexport default (props : any) => {\r\n  const reactCanvas = useRef(null);\r\n  const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n\r\n  useEffect(() => {\r\n    if (reactCanvas.current) {\r\n      const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);\r\n      const scene = new Scene(engine, sceneOptions);\r\n      if (scene.isReady()) {\r\n        props.onSceneReady(scene);\r\n      } else {\r\n        scene.onReadyObservable.addOnce((scene) => props.onSceneReady(scene));\r\n      }\r\n\r\n      engine.runRenderLoop(() => {\r\n        if (typeof onRender === \"function\") {\r\n          onRender(scene);\r\n        }\r\n        scene.render();\r\n      });\r\n\r\n      const resize = () => {\r\n        scene.getEngine().resize();\r\n      };\r\n\r\n      if (window) {\r\n        window.addEventListener(\"resize\", resize);\r\n      }\r\n\r\n      return () => {\r\n        scene.getEngine().dispose();\r\n\r\n        if (window) {\r\n          window.removeEventListener(\"resize\", resize);\r\n        }\r\n      };\r\n    }\r\n  }, [reactCanvas]);\r\n\r\n  return <canvas ref={reactCanvas} {...rest} />;\r\n};\r\n","import { Schema, type, ArraySchema } from \"@colyseus/schema\";\r\n\r\nexport class Vector3 extends Schema {\r\n  @type(\"number\") x: number = 0;\r\n  @type(\"number\") y: number = 0;\r\n  @type(\"number\") z: number = 0;\r\n}\r\n\r\nexport class Color3 extends Schema {\r\n  @type(\"number\") r: number = 0;\r\n  @type(\"number\") g: number = 0;\r\n  @type(\"number\") b: number = 0;\r\n}\r\n\r\nexport class Player extends Schema {\r\n  @type(\"string\") id: string;\r\n  @type(Color3) color: Color3;\r\n  @type(\"string\") name: string;\r\n}\r\n\r\nexport class Building extends Schema {\r\n  @type(\"number\") type: number = 0;\r\n  @type(\"number\") rotation: number = 0;\r\n}\r\n\r\nexport class Tile extends Schema {\r\n  @type(\"number\") terrainType: number = 0;\r\n  @type(\"number\") height: number = 0;\r\n  @type(Building) building : Building = null;\r\n}\r\n\r\nexport class Message extends Schema {\r\n  @type(\"string\") name: string = \"\";\r\n  @type(Color3) color: Color3;\r\n  @type(\"string\") message : string = \"\";\r\n}\r\n\r\nexport class MyRoomState extends Schema {\r\n  @type([Player]) players = new ArraySchema<Player>();\r\n  @type(\"number\") width: number = 25;\r\n  @type(\"number\") height: number = 25;\r\n  @type([Tile]) tiles = new ArraySchema<Tile>();\r\n  @type(\"string\") name: String = \"\";\r\n  @type([Message]) messages = new ArraySchema<Message>();\r\n}\r\n","export interface TerrainType {\r\n    name: string;\r\n    asset: string\r\n}\r\n\r\nexport interface BuildingType {\r\n    name: string;\r\n    terrainTypes: number[];\r\n    asset: string;\r\n    probability: number;\r\n}\r\n\r\nexport const terrainTypes = [\r\n    {\r\n        name: \"Grass\",\r\n        color: \"#3F9C74\",\r\n        asset: \"hex_forest\"\r\n    },\r\n    {\r\n        name: \"Water\",\r\n        color: \"#3EB2BB\",\r\n        asset: \"hex_water\"\r\n    },\r\n    {\r\n        name: \"Sand\",\r\n        color: \"#B69169\",\r\n        asset: \"hex_sand\"\r\n    },\r\n    {\r\n        name: \"Dirt\",\r\n        color: \"#A76F52\",\r\n        asset: \"hex_rock\"\r\n    }\r\n]\r\n\r\nexport const buildingTypes : BuildingType[] = [\r\n    {\r\n        name: \"Forest\",\r\n        terrainTypes: [0],\r\n        asset: \"forest1\",\r\n        probability: 0.2\r\n\r\n    },\r\n    {\r\n        name: \"Forest with Rock\",\r\n        terrainTypes: [0],\r\n        asset: \"forest2\",\r\n        probability: 0.2\r\n    },\r\n    {\r\n        name: \"Mountain\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"mountain\",\r\n        probability: 0.02\r\n    },\r\n    {\r\n        name: \"House\",\r\n        terrainTypes: [0,2],\r\n        asset: \"house\",\r\n        probability: 0.02\r\n    },\r\n    {\r\n        name: \"Farm\",\r\n        terrainTypes: [0],\r\n        asset: \"farm_plot\",\r\n        probability: 0.02\r\n    },\r\n    {\r\n        name: \"Mine\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"mine\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Market\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"market\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Windmill\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"mill\",\r\n        probability: 0.005\r\n    },\r\n    {\r\n        name: \"Lumbermill\",\r\n        terrainTypes: [0],\r\n        asset: \"lumbermill\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Barracks\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"barracks\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Archery Range\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"archeryrange\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Watchtower\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"watchtower\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Castle\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"castle\",\r\n        probability: 0.0005\r\n    },\r\n    {\r\n        name: \"Bridge\",\r\n        terrainTypes: [1],\r\n        asset: \"bridge\",\r\n        probability: 0\r\n    }\r\n]","import { Nullable } from '@babylonjs/core';\r\nimport { useEffect, useState } from 'react';\r\nimport { Building, Tile } from './schema/MyRoomState';\r\nimport { terrainTypes, buildingTypes } from './schema/WorldObjects';\r\n\r\n\r\ninterface TilePanelProps {\r\n    tile: Tile;\r\n    demolishBuilding: () => void;\r\n    buildBuilding: (type: number) => void;\r\n    setTerrainType: (type: number) => void;\r\n    setHeight: (height: number) => void;\r\n    setRotation: (rotation: number) => void;\r\n}\r\n\r\nexport default function TilePanel(props: TilePanelProps) {\r\n    const [rotation,setRotationLocal] = useState(0);\r\n    const [height,setHeightLocal] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setHeightLocal(props.tile ? props.tile.height : 0);\r\n        if (props.tile && props.tile.building) {\r\n            setRotationLocal(props.tile.building.rotation);\r\n        }\r\n    }, [props.tile]);\r\n\r\n    const updateHeight = (height : number) => {\r\n        setHeightLocal(height);\r\n        props.setHeight(height);\r\n    }\r\n\r\n    const updateRotation = (rotation: number) => {\r\n        setRotationLocal(rotation);\r\n        props.setRotation(rotation);\r\n    }\r\n\r\n    if (!props.tile) return <div id=\"tile-panel\" className=\"hide\"></div>;\r\n    return <div id=\"tile-panel\">\r\n        <div id=\"terrain-type\">\r\n            {terrainTypes.map((type, index) => <button onClick={() => props.setTerrainType(index)} className={props.tile.terrainType == index ? \"terrain selected\" : \"terrain\" } style={{backgroundColor: type.color}}></button>)}\r\n        </div>\r\n        <hr/>\r\n        <div id = \"height\">\r\n            <div><label htmlFor=\"height\">Height</label></div>\r\n            <input type=\"range\" step=\"0.05\" min=\"0\" max=\"2\" value={height} onChange={ev => updateHeight(parseFloat(ev.target.value))} id=\"height\"/>\r\n        </div>\r\n        <hr/>\r\n        {!(props.tile.building) ?\r\n            <div id=\"no-building\">\r\n                <h3>Build</h3>\r\n                {buildingTypes.map((type, index) => type.terrainTypes.includes(props.tile.terrainType) ? <button onClick={() => props.buildBuilding(index)}>{type.name}</button> : <></>)}\r\n            </div>\r\n            :\r\n            <div id=\"building\">\r\n                <h3>{buildingTypes[props.tile.building.type].name}</h3>\r\n                <div><label htmlFor=\"rotation\">Rotation</label></div>\r\n                <input type=\"range\" min=\"0\" max={2*Math.PI} step={0.1} value={rotation} onChange={ev => updateRotation(parseFloat(ev.target.value))} id=\"rotation\"/>\r\n                <button onClick={props.demolishBuilding}>Demolish Building</button>\r\n            </div>\r\n        }\r\n    </div>;\r\n}","import { Message, Player } from \"./schema/MyRoomState\"\r\nimport { FormEvent, useState } from \"react\";\r\n\r\nexport default (props: {players: Player[], sendMessage: (text: string) => void, messages: Message[]}) => {\r\n    const [text,setText] = useState(\"\");\r\n    console.log(\"players\", props.players);\r\n\r\n    const sendMessage = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        props.sendMessage(text);\r\n        setText(\"\");\r\n    }\r\n    return <div id=\"left-panel\">\r\n        <div id=\"online-players\">\r\n            <h3 id=\"player-count\">Online Players: {props.players.length}</h3>\r\n            {\r\n            props.players.map(player =><div key={player.id} className=\"player-name\" style={{color: `rgb(${player.color.r * 255},${player.color.g * 255},${player.color.b * 255})`}}>{player.name}</div>)\r\n            }\r\n        </div>\r\n        <hr/>\r\n        <div id=\"chat\">\r\n            <div id=\"messages\">\r\n            <h3>Chat</h3>\r\n                {props.messages.map(message => <div><span className=\"player-name\" style={{color: `rgb(${message.color.r * 255},${message.color.g * 255},${message.color.b * 255})` }}>{message.name}</span><span>{message.message}</span></div>)}\r\n            </div>\r\n            <form id=\"chatbox\" onSubmit={sendMessage}>\r\n                <input autoComplete=\"off\" type=\"text\" value={text} onChange={(ev) => setText(ev.target.value)}/>\r\n                <button>Send</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}","import { useState } from \"react\";\r\n\r\nexport default function Help() {\r\n    const [visible, setVisible] = useState(false);\r\n    return <>\r\n        {visible ?\r\n        <div id=\"help-box\">\r\n            <p>Powered by <a href=\"https://babylonjs.com/\">Babylon.js</a></p>\r\n            <p>Networking using <a href=\"https://www.colyseus.io/\">Colyseus</a></p>\r\n            <p>Created by <a href=\"https://twitter.com/DarraghBurke13\">Darragh Burke</a></p>\r\n            <p>Incredible assets by <a href=\"https://kaylousberg.itch.io/kaykit-medieval-builder-pack\">Kay Lousberg</a> - check them out!</p>\r\n            <button onClick={() => setVisible(false)}>X</button>\r\n        </div>\r\n        : <></> }\r\n        <button onClick={() => setVisible(!visible)} id=\"help-button\">?</button>\r\n    </>;\r\n}","import React, { useState } from \"react\";\r\nimport * as Colyseus from \"colyseus.js\"; // not necessary if included via <script> tag.\r\nimport {  Vector3, HemisphericLight, Scene, Mesh, TransformNode, Animation, SceneLoader, PointerEventTypes, Node, AssetsManager, ArcRotateCamera, StateCondition } from \"@babylonjs/core\";\r\nimport SceneComponent from \"./SceneComponent\"; // uses above component in same directory\r\nimport { MyRoomState, Tile } from './schema/MyRoomState';\r\nimport \"./App.css\";\r\nimport \"@babylonjs/loaders/glTF\";\r\nimport \"@babylonjs/inspector\";\r\nimport TilePanel from './TilePanel';\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport Chat from \"./Chat\";\r\nimport { buildingTypes, terrainTypes } from \"./schema/WorldObjects\";\r\nimport Help from \"./Help\";\r\n\r\nclass GameObject {\r\n    parentMesh : Mesh;\r\n\r\n    constructor(glb: string, assetManager: AssetsManager) {\r\n        this.loadMesh(glb, assetManager);\r\n    }\r\n    async loadMesh(glb: string, assetManager: AssetsManager) {\r\n        // const importResult = await SceneLoader.ImportMeshAsync(\r\n        //     \"\",\r\n        //    `${process.env.PUBLIC_URL}/${this.getFolder()}/${glb}`,\r\n        //     glb,\r\n        //     scene,\r\n        //     undefined,\r\n        //     \".glb\"\r\n        // );\r\n        const task = assetManager.addMeshTask(\"task\", \"\", `${process.env.PUBLIC_URL}/assets/${this.getFolder()}/`, `${glb}.glb`);\r\n        task.onSuccess = (task) => {\r\n            this.parentMesh = task.loadedMeshes[0] as Mesh;\r\n            this.parentMesh.position.z = 1000000;\r\n        }\r\n        // this.parentMesh = importResult.meshes[0] as Mesh;\r\n        //this.parentMesh.setEnabled(false);\r\n    }\r\n\r\n    getFolder() {\r\n        return \"\";\r\n    }\r\n}\r\n\r\nclass TerrainType extends GameObject {\r\n    getFolder() {\r\n        return \"tiles\";\r\n    }\r\n}\r\n\r\nclass Building extends GameObject {\r\n    getFolder() {\r\n        return \"buildings\";\r\n    }\r\n}\r\n\r\nexport default () => {\r\n    const [focusedKey, setFocusedKey] = useState(-1);\r\n    const [roomState, setRoomState] = useState(new MyRoomState());\r\n    const [state, updateState] = React.useState({});\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n    // useEffect(() => {\r\n    //     console.log(\"effect\", focusedKey);\r\n    //     setFocusedTile(roomState.tiles[focusedKey]);\r\n    // });\r\n    const [room, setRoom] = useState<Nullable<Colyseus.Room>>(null);\r\n    let terrains : TerrainType[] = [];\r\n    let buildings : Building[] = [];\r\n\r\n    async function loadGameData(scene: Scene) {\r\n        const assetManager = new AssetsManager(scene);\r\n        terrainTypes.forEach(type => {\r\n            terrains.push(new TerrainType(type.asset, assetManager));\r\n        })\r\n        buildingTypes.forEach(type => {\r\n            buildings.push(new Building(type.asset, assetManager));\r\n        })\r\n        await assetManager.loadAsync();\r\n        connect(scene);\r\n        // scene.debugLayer.show();\r\n        // scene started rendering, everything is initialized\r\n    };\r\n\r\n    // thanks to red blob games\r\n    function getCoords(key: number, width: number) : [x: number, y: number] {\r\n        const [col, row] = [key % width, Math.floor(key / width)];\r\n        return getPixelFromHex(col,row);\r\n        // return [Math.sqrt(3) * (col + 0.5 * (row&1)) , 3.0/2 * row];\r\n    }\r\n\r\n    function getPixelFromHex(col: number, row: number) : [x: number, y: number] {\r\n        const sz = 1.1;\r\n        return [sz * (Math.sqrt(3) * col + Math.sqrt(3) /2 * row), sz * 3/2 * row];\r\n    }\r\n\r\n    function connect(scene: Scene) {\r\n        var client = new Colyseus.Client('ws://mamawn.us-west-1.colyseus.dev');\r\n        client.joinOrCreate(\"my_room\").then(room => {\r\n            setRoom(room);\r\n            console.log(room.sessionId, \"joined\", room.name);\r\n            room.onStateChange((state : any) => {\r\n                setRoomState(state);\r\n                forceUpdate();\r\n            });\r\n            const state = (room.state as MyRoomState);\r\n            const [cx, cy] = getPixelFromHex(25 / 2, 25 / 2);\r\n            (scene.cameras[0] as ArcRotateCamera).target.set(cx,2,cy);\r\n            (scene.cameras[0] as ArcRotateCamera).radius = 40;\r\n            \r\n            state.tiles.onAdd = (tile: Tile, key: number) => {\r\n                console.log(tile,key);\r\n                const [x,y] = getCoords(key, state.width);\r\n                let transformNode  = new TransformNode(`${key}`, scene);\r\n                transformNode.position.set(x, tile.height, y);\r\n                transformNode.metadata = {key};\r\n                let terrainMesh = terrains[tile.terrainType].parentMesh.clone(`tile`, transformNode);\r\n                terrainMesh.position.set(0,0,0);\r\n                terrainMesh.setEnabled(true);\r\n                terrainMesh.isPickable = true;\r\n                let buildingNode : TransformNode = null;\r\n                let buildingMesh : Mesh = null;\r\n                tile.listen(\"building\", (currentValue, previousValue) => {\r\n                    if (previousValue) {\r\n                        const animation = Animation.CreateAndStartAnimation(\"build\",  buildingNode, \"position.y\", 60, 10, 1, 0);\r\n                        animation.loopAnimation = false;\r\n                        animation.onAnimationEndObservable.add((eventData) => {eventData.target.dispose();});\r\n                    }\r\n                    if (currentValue) {\r\n                        buildingNode = new TransformNode(\"building\", scene);\r\n                        buildingNode.parent = transformNode;\r\n                        buildingMesh = buildings[currentValue.type].parentMesh.clone(`building`, buildingNode);\r\n                        buildingMesh.position.set(0,0,0);\r\n                        buildingMesh.setEnabled(true);\r\n                        const animation = Animation.CreateAndStartAnimation(\"build\", buildingNode, \"position.y\", 60, 10, 0, 1);\r\n                        animation.loopAnimation = false;\r\n                        tile.building.listen(\"rotation\", (currentValue, previousValue) => {\r\n                            buildingNode.rotation.y = tile.building.rotation;\r\n                        })\r\n                    }\r\n                })\r\n                tile.listen(\"terrainType\", (currentValue, previousValue) => {\r\n                    if (previousValue) {\r\n                        terrainMesh.dispose();\r\n                    }\r\n                    if (currentValue) {\r\n                        terrainMesh = terrains[tile.terrainType].parentMesh.clone(`tile`, transformNode);\r\n                        terrainMesh.position.set(0,0,0);\r\n                        terrainMesh.setEnabled(true);\r\n                        terrainMesh.isPickable = true;\r\n                    }\r\n                })\r\n                tile.listen(\"height\", (currentValue, previousValue) => {\r\n                    transformNode.position.y = tile.height;\r\n                })\r\n            }\r\n            scene.onPointerObservable.add((pointerInfo) => {\r\n                if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\r\n                    if (pointerInfo.pickInfo && pointerInfo.pickInfo.pickedMesh) {\r\n                    const mesh = pointerInfo.pickInfo.pickedMesh;\r\n                    let keyNode : Node = mesh;\r\n                    while(!keyNode.metadata || !keyNode.metadata.key) {\r\n                        keyNode = keyNode.parent;\r\n                    }\r\n                    if (pointerInfo.pickInfo && pointerInfo.pickInfo.pickedMesh) {\r\n                        const mesh = pointerInfo.pickInfo.pickedMesh;\r\n                        let keyNode : Node = mesh;\r\n                        while(!keyNode.metadata || !keyNode.metadata.key) {\r\n                            keyNode = keyNode.parent;\r\n                            if (!keyNode) return;\r\n                        }\r\n                        setFocusedKey(keyNode.metadata.key);\r\n                    }\r\n                } else {\r\n                    setFocusedKey(-1);\r\n                }\r\n            }\r\n            })\r\n            \r\n        }).catch(e => {\r\n            console.log(\"JOIN ERROR\", e);\r\n        });\r\n    }\r\n    const onSceneReady = (scene : Scene) => {\r\n        loadGameData(scene);\r\n    \r\n      // This creates and positions a free camera (non-mesh)\r\n        const camera = new ArcRotateCamera(\r\n            \"my first camera\",\r\n            0,\r\n            Math.PI / 3,\r\n            10,\r\n            new Vector3(0, 0, 0),\r\n            scene\r\n        );\r\n    \r\n      // This targets the camera to scene origin\r\n      camera.setTarget(Vector3.Zero());\r\n    \r\n      const canvas = scene.getEngine().getRenderingCanvas();\r\n    \r\n      // This attaches the camera to the canvas\r\n      camera.attachControl(canvas, true);\r\n    \r\n      // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n      var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\r\n    \r\n      // Default intensity is 1. Let's dim the light a small amount\r\n      light.intensity = 0.7;\r\n    \r\n    };\r\n\r\n    /**\r\n * Will run on every frame render.  We are spinning the box on y-axis.\r\n */\r\nconst onRender = (scene : Scene) => {};\r\n    console.log(roomState.players);\r\n\r\n  return <div>\r\n    <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id=\"my-canvas\" />\r\n    <TilePanel\r\n        tile={roomState.tiles[focusedKey]}\r\n        demolishBuilding={() => room.send(\"demolish\", {key: focusedKey})}\r\n        buildBuilding={type => room.send(\"build\", {key: focusedKey, type})}\r\n        setTerrainType={type => room.send(\"changeTerrainType\", {key: focusedKey, type})}\r\n        setHeight={height => room.send(\"setHeight\", {key: focusedKey, height})}\r\n        setRotation={rotation => room.send(\"setRotation\", {key: focusedKey, rotation})}\r\n    />\r\n    <Chat\r\n        players={roomState.players}\r\n        sendMessage={(message) => room.send(\"message\", {message})}\r\n        messages={roomState.messages}\r\n    />\r\n    <h1 id=\"world-name\">{roomState.name}</h1>\r\n    <Help/>\r\n  </div>\r\n};\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}