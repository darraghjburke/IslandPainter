{"version":3,"sources":["logo.svg","SceneComponent.tsx","schema/MyRoomState.ts","schema/WorldObjects.ts","TilePanel.tsx","Chat.tsx","Help.tsx","Game.tsx","App.js","reportWebVitals.js","index.js"],"names":["props","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","rest","onSceneReady","useEffect","current","engine","Engine","scene","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","getEngine","window","addEventListener","dispose","removeEventListener","ref","Color3","type","Schema","Player","Building","Tile","ArraySchema","Message","MyRoomState","terrainTypes","name","color","asset","buildingTypes","probability","TilePanel","useState","rotation","setRotationLocal","height","setHeightLocal","tile","building","id","className","map","index","onClick","setTerrainType","terrainType","style","backgroundColor","htmlFor","step","min","max","value","onChange","ev","setHeight","updateHeight","parseFloat","target","Math","PI","setRotation","updateRotation","demolishBuilding","includes","buildBuilding","text","setText","messages","scrollTop","scrollHeight","length","players","player","r","g","b","message","onSubmit","event","preventDefault","sendMessage","autoComplete","Help","visible","setVisible","href","GameObject","folder","glb","assetManager","parentMesh","addMeshTask","process","onSuccess","task","loadedMeshes","position","z","updateTileBorder","transformNode","col3","focusing","forEach","getChildMeshes","mesh","renderOutline","outlineColor","outlineWidth","focusedKey","setFocusedKey","roomState","setRoomState","React","updateState","forceUpdate","useCallback","room","setRoom","terrains","buildings","a","AssetsManager","push","loadAsync","getCoords","key","width","getPixelFromAxial","floor","getAxialFromKey","col","row","sqrt","SceneComponent","loadGameData","then","Colyseus","joinOrCreate","console","log","sessionId","onStateChange","state","cx","cy","cameras","set","radius","tiles","onAdd","x","y","TransformNode","metadata","terrainMesh","clone","isPickable","buildingNode","listen","currentValue","previousValue","animation","Animation","CreateAndStartAnimation","loopAnimation","onAnimationEndObservable","add","eventData","parent","setEnabled","onPointerObservable","pointerInfo","pickInfo","pickedMesh","keyNode","PointerEventTypes","POINTERDOWN","send","catch","e","connect","camera","ArcRotateCamera","Vector3","setTarget","Zero","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","Chat","App","Game","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f0b26ac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Engine, Scene } from \"@babylonjs/core\";\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nexport default (props : any) => {\r\n  const reactCanvas = useRef(null);\r\n  const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, ...rest } = props;\r\n\r\n  useEffect(() => {\r\n    if (reactCanvas.current) {\r\n      const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);\r\n      const scene = new Scene(engine, sceneOptions);\r\n      if (scene.isReady()) {\r\n        props.onSceneReady(scene);\r\n      } else {\r\n        scene.onReadyObservable.addOnce((scene) => props.onSceneReady(scene));\r\n      }\r\n\r\n      engine.runRenderLoop(() => {\r\n        if (typeof onRender === \"function\") {\r\n          onRender(scene);\r\n        }\r\n        scene.render();\r\n      });\r\n\r\n      const resize = () => {\r\n        scene.getEngine().resize();\r\n      };\r\n\r\n      if (window) {\r\n        window.addEventListener(\"resize\", resize);\r\n      }\r\n\r\n      return () => {\r\n        scene.getEngine().dispose();\r\n\r\n        if (window) {\r\n          window.removeEventListener(\"resize\", resize);\r\n        }\r\n      };\r\n    }\r\n  }, [reactCanvas]);\r\n\r\n  return <canvas ref={reactCanvas} {...rest} />;\r\n};\r\n","import { Schema, type, ArraySchema } from \"@colyseus/schema\";\r\n\r\nexport class Color3 extends Schema {\r\n  @type(\"number\") r: number = 0;\r\n  @type(\"number\") g: number = 0;\r\n  @type(\"number\") b: number = 0;\r\n}\r\n\r\nexport class Player extends Schema {\r\n  @type(\"string\") id: string;\r\n  @type(Color3) color: Color3;\r\n  @type(\"string\") name: string;\r\n}\r\n\r\nexport class Building extends Schema {\r\n  @type(\"number\") type: number = 0;\r\n  @type(\"number\") rotation: number = 0;\r\n}\r\n\r\nexport class Tile extends Schema {\r\n  @type(\"number\") terrainType: number = 0;\r\n  @type(\"number\") height: number = 0;\r\n  @type(Building) building : Building = null;\r\n  @type([Player]) focusing : Player[] = new ArraySchema<Player>();\r\n}\r\n\r\nexport class Message extends Schema {\r\n  @type(\"string\") name: string = \"\";\r\n  @type(Color3) color: Color3;\r\n  @type(\"string\") message : string = \"\";\r\n}\r\n\r\nexport class MyRoomState extends Schema {\r\n  @type([Player]) players = new ArraySchema<Player>();\r\n  @type(\"number\") width: number = 25;\r\n  @type(\"number\") height: number = 25;\r\n  @type([Tile]) tiles = new ArraySchema<Tile>();\r\n  @type(\"string\") name: String = \"\";\r\n  @type([Message]) messages = new ArraySchema<Message>();\r\n}\r\n","export interface TerrainType {\r\n    name: string;\r\n    asset: string\r\n}\r\n\r\nexport interface BuildingType {\r\n    name: string;\r\n    terrainTypes: number[];\r\n    asset: string;\r\n    probability: number;\r\n}\r\n\r\nexport const terrainTypes = [\r\n    {\r\n        name: \"Grass\",\r\n        color: \"#3F9C74\",\r\n        asset: \"hex_forest\"\r\n    },\r\n    {\r\n        name: \"Water\",\r\n        color: \"#3EB2BB\",\r\n        asset: \"hex_water\"\r\n    },\r\n    {\r\n        name: \"Sand\",\r\n        color: \"#B69169\",\r\n        asset: \"hex_sand\"\r\n    },\r\n    {\r\n        name: \"Dirt\",\r\n        color: \"#A76F52\",\r\n        asset: \"hex_rock\"\r\n    }\r\n]\r\n\r\nexport const buildingTypes : BuildingType[] = [\r\n    {\r\n        name: \"Forest\",\r\n        terrainTypes: [0],\r\n        asset: \"forest1\",\r\n        probability: 0.2\r\n\r\n    },\r\n    {\r\n        name: \"Forest with Rock\",\r\n        terrainTypes: [0],\r\n        asset: \"forest2\",\r\n        probability: 0.2\r\n    },\r\n    {\r\n        name: \"Rocks\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"rocks_small\",\r\n        probability: 0.1\r\n    },\r\n    {\r\n        name: \"Mountain\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"mountain\",\r\n        probability: 0.02\r\n    },\r\n    {\r\n        name: \"House\",\r\n        terrainTypes: [0,2],\r\n        asset: \"house\",\r\n        probability: 0.02\r\n    },\r\n    {\r\n        name: \"Farm\",\r\n        terrainTypes: [0],\r\n        asset: \"farm_plot\",\r\n        probability: 0.02\r\n    },\r\n    {\r\n        name: \"Mine\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"mine\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Market\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"market\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Windmill\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"mill\",\r\n        probability: 0.005\r\n    },\r\n    {\r\n        name: \"Lumbermill\",\r\n        terrainTypes: [0],\r\n        asset: \"lumbermill\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Barracks\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"barracks\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Archery Range\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"archeryrange\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Watchtower\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"watchtower\",\r\n        probability: 0.01\r\n    },\r\n    {\r\n        name: \"Castle\",\r\n        terrainTypes: [0,2,3],\r\n        asset: \"castle\",\r\n        probability: 0.0005\r\n    },\r\n    {\r\n        name: \"Bridge\",\r\n        terrainTypes: [1],\r\n        asset: \"bridge\",\r\n        probability: 0\r\n    }\r\n]","import { useEffect, useState } from 'react';\r\nimport { Tile } from './schema/MyRoomState';\r\nimport { terrainTypes, buildingTypes } from './schema/WorldObjects';\r\n\r\n\r\ninterface TilePanelProps {\r\n    tile: Tile;\r\n    demolishBuilding: () => void;\r\n    buildBuilding: (type: number) => void;\r\n    setTerrainType: (type: number) => void;\r\n    setHeight: (height: number) => void;\r\n    setRotation: (rotation: number) => void;\r\n}\r\n\r\nexport default function TilePanel(props: TilePanelProps) {\r\n    const [rotation,setRotationLocal] = useState(0);\r\n    const [height,setHeightLocal] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setHeightLocal(props.tile ? props.tile.height : 0);\r\n        if (props.tile && props.tile.building) {\r\n            setRotationLocal(props.tile.building.rotation);\r\n        }\r\n    }, [props.tile]);\r\n\r\n    const updateHeight = (height : number) => {\r\n        setHeightLocal(height);\r\n        props.setHeight(height);\r\n    }\r\n\r\n    const updateRotation = (rotation: number) => {\r\n        setRotationLocal(rotation);\r\n        props.setRotation(rotation);\r\n    }\r\n\r\n    return <div id=\"tile-panel\" className={!props.tile ? \"hide\" : \"\"}>\r\n        {\r\n        !props.tile ? <></> :\r\n        <>\r\n            <div id=\"terrain-type\">\r\n                {terrainTypes.map((type, index) => <button key={index} onClick={() => props.setTerrainType(index)} className={props.tile.terrainType == index ? \"terrain selected\" : \"terrain\" } style={{backgroundColor: type.color}}></button>)}\r\n            </div>\r\n            <div className=\"hr\"/>\r\n            <div id = \"height\">\r\n                <div><label htmlFor=\"height\">Height</label></div>\r\n                <input type=\"range\" step=\"0.05\" min=\"0\" max=\"2\" value={height} onChange={ev => updateHeight(parseFloat(ev.target.value))} id=\"height\"/>\r\n            </div>\r\n            <div className=\"hr\"/>\r\n            {!(props.tile.building) ?\r\n                <div id=\"no-building\">\r\n                    <h3>Build</h3>\r\n                    {buildingTypes.map((type, index) => type.terrainTypes.includes(props.tile.terrainType) ? <button key={type.name} onClick={() => props.buildBuilding(index)}>{type.name}</button> : <></>)}\r\n                </div>\r\n                :\r\n                <div id=\"building\">\r\n                    <h3>{buildingTypes[props.tile.building.type].name}</h3>\r\n                    <div><label htmlFor=\"rotation\">Rotation</label></div>\r\n                    <input type=\"range\" min=\"0\" max={2*Math.PI} step={0.1} value={rotation} onChange={ev => updateRotation(parseFloat(ev.target.value))} id=\"rotation\"/>\r\n                    <button onClick={props.demolishBuilding}>Demolish Building</button>\r\n                </div>\r\n            }\r\n        </>\r\n        }\r\n    </div>;\r\n}","import { Message, Player } from \"./schema/MyRoomState\"\r\nimport { FormEvent, useEffect, useRef, useState } from \"react\";\r\n\r\nexport default (props: {players: Player[], sendMessage: (text: string) => void, messages: Message[]}) => {\r\n    const [text,setText] = useState(\"\");\r\n    const messages = useRef<HTMLDivElement>(null);\r\n\r\n    const sendMessage = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if (text.length > 0) {\r\n            props.sendMessage(text);\r\n            setText(\"\");\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        messages.current.scrollTop = messages.current.scrollHeight;\r\n    }, [props.messages.length])\r\n\r\n    return <div id=\"left-panel\">\r\n        <div id=\"online-players\">\r\n            <h3 id=\"player-count\">Online Players: {props.players.length}</h3>\r\n            {\r\n            props.players.map(player =><div key={player.id} className=\"player-name\" style={{color: `rgb(${player.color.r * 255},${player.color.g * 255},${player.color.b * 255})`}}>{player.name}</div>)\r\n            }\r\n        </div>\r\n        <div className=\"hr\"/>\r\n        <div id=\"chat\">\r\n            <div id=\"messages\" ref={messages}>\r\n            <h3>Chat</h3>\r\n                {props.messages.map(message => <div className=\"message\"><span className=\"player-name\" style={{color: `rgb(${message.color.r * 255},${message.color.g * 255},${message.color.b * 255})` }}>{message.name}</span><span>{message.message}</span></div>)}\r\n            </div>\r\n            <form id=\"chatbox\" onSubmit={sendMessage}>\r\n                <input autoComplete=\"off\" type=\"text\" value={text} onChange={(ev) => setText(ev.target.value)}/>\r\n                <button>Send</button>\r\n            </form>\r\n        </div>\r\n    </div>\r\n}","import { useState } from \"react\";\r\n\r\nexport default function Help() {\r\n    const [visible, setVisible] = useState(false);\r\n    return <>\r\n        {visible ?\r\n        <div id=\"help-box\">\r\n            <h1>Island Painter</h1>\r\n            <p>Powered by <a href=\"https://babylonjs.com/\">Babylon.js</a></p>\r\n            <p>Created by <a href=\"https://twitter.com/DarraghBurke13\">Darragh Burke</a></p>\r\n            <p>Get the source at <a href=\"https://github.com/darraghjburke/IslandPainter\">GitHub</a> </p>\r\n            <p>Networking using <a href=\"https://www.colyseus.io/\">Colyseus</a></p>\r\n            <p>Assets by <a href=\"https://kaylousberg.itch.io/kaykit-medieval-builder-pack\">Kay Lousberg</a> - check out their work!</p>\r\n            <p>Hex coordinate conversions by <a href=\"https://www.redblobgames.com/grids/hexagons\">RedBlobGames</a></p>\r\n            <p>Hand drawn CSS from <a href=\"https://codemyui.com/hand-drawn-border-buttons-css/\">CodeMyUI</a></p>\r\n            <button onClick={() => setVisible(false)}>X</button>\r\n        </div>\r\n        : <></> }\r\n        <button onClick={() => setVisible(!visible)} id=\"help-button\">?</button>\r\n    </>;\r\n}","import React, { useState } from \"react\";\r\nimport * as Colyseus from \"colyseus.js\"; // not necessary if included via <script> tag.\r\nimport {  Vector3, HemisphericLight, Scene, Mesh, TransformNode, Animation, SceneLoader, PointerEventTypes, Node, AssetsManager, ArcRotateCamera, StateCondition, PBRMaterial, Color3 } from \"@babylonjs/core\";\r\nimport SceneComponent from \"./SceneComponent\"; // uses above component in same directory\r\nimport { MyRoomState, Player, Tile } from './schema/MyRoomState';\r\nimport \"./App.css\";\r\nimport \"@babylonjs/loaders/glTF\";\r\nimport \"@babylonjs/inspector\";\r\nimport TilePanel from './TilePanel';\r\nimport { Nullable } from \"@babylonjs/core/types\";\r\nimport Chat from \"./Chat\";\r\nimport { buildingTypes, terrainTypes } from \"./schema/WorldObjects\";\r\nimport Help from \"./Help\";\r\nimport BuildPanel from \"./BuildPanel\";\r\n\r\nclass GameObject {\r\n    parentMesh : Mesh;\r\n    // buildMesh: Mesh;\r\n\r\n    constructor(folder: string, glb: string, assetManager: AssetsManager) {\r\n        const task = assetManager.addMeshTask(\"task\", \"\", `${process.env.PUBLIC_URL}/assets/${folder}/`, `${glb}.glb`);\r\n        task.onSuccess = (task) => {\r\n            this.parentMesh = task.loadedMeshes[0] as Mesh;\r\n            this.parentMesh.position.z = 1000000;\r\n            // this.buildMesh = this.parentMesh.clone(`build${this.parentMesh.name}`, null);\r\n            // this.buildMesh.getChildMeshes().forEach(mesh => {\r\n            //     mesh.material = mesh.material.clone(\"\");\r\n            //     mesh.material.alpha = 0.5;\r\n            //     (mesh.material as PBRMaterial).alpha = 0.1;\r\n            //     (mesh.material as PBRMaterial).alphaMode = 1;\r\n            // })\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateTileBorder(tile: Tile, transformNode: TransformNode) {\r\n    const col3 = new Color3(0,0,0);\r\n    // average the colors of the players who are focusing\r\n    tile.focusing.forEach(player => {\r\n        col3.r += player.color.r / tile.focusing.length;\r\n        col3.g += player.color.g / tile.focusing.length;\r\n        col3.b += player.color.b / tile.focusing.length;\r\n    })\r\n    transformNode.getChildMeshes().forEach(mesh => {\r\n        if (tile.focusing.length == 0) {\r\n            mesh.renderOutline = false;\r\n        } else {\r\n            mesh.renderOutline = true;\r\n            mesh.outlineColor = col3;\r\n            mesh.outlineWidth = 0.05;\r\n        }\r\n    })\r\n}\r\n\r\nexport default () => {\r\n    const [focusedKey, setFocusedKey] = useState(-1);\r\n    const [roomState, setRoomState] = useState(new MyRoomState());\r\n    const [state, updateState] = React.useState({});\r\n    const forceUpdate = React.useCallback(() => updateState({}), []);\r\n    const [room, setRoom] = useState<Nullable<Colyseus.Room>>(null);\r\n    const terrains : GameObject[] = [];\r\n    const buildings : GameObject[] = [];\r\n    // let buildType = 0;\r\n    // let buildMesh : Mesh = null;\r\n\r\n\r\n    async function loadGameData(scene: Scene) {\r\n        const assetManager = new AssetsManager(scene);\r\n        terrainTypes.forEach(type => {\r\n            terrains.push(new GameObject(\"tiles\", type.asset, assetManager));\r\n        })\r\n        buildingTypes.forEach(type => {\r\n            buildings.push(new GameObject(\"buildings\", type.asset, assetManager));\r\n        })\r\n        await assetManager.loadAsync();\r\n    };\r\n\r\n    // thanks to RedBlobGames\r\n    function getCoords(key: number, width: number) : [x: number, y: number] {\r\n        return getPixelFromAxial(...getAxialFromKey(key, width));\r\n    }\r\n\r\n    function getAxialFromKey(key: number, width: number) : [r: number, q: number] {\r\n        return [key % width, Math.floor(key / width)];\r\n    }\r\n\r\n    function getPixelFromAxial(col: number, row: number) : [x: number, y: number] {\r\n        const sz = 1.1;\r\n        return [sz * (Math.sqrt(3) * col + Math.sqrt(3) /2 * row), sz * 3/2 * row];\r\n    }\r\n\r\n    function connect(scene: Scene) {\r\n        var client = new Colyseus.Client('wss://mamawn.us-west-1.colyseus.dev'); // for colyseus arena\r\n        // const client = new Colyseus.Client('ws://localhost:2567'); // for local dev\r\n        client.joinOrCreate(\"my_room\").then(room => {\r\n            setRoom(room);\r\n            console.log(room.sessionId, \"joined\", room.name);\r\n            room.onStateChange((state : any) => {\r\n                setRoomState(state);\r\n                forceUpdate();\r\n            });\r\n            const state = (room.state as MyRoomState);\r\n            const [cx, cy] = getPixelFromAxial(25 / 2, 25 / 2);\r\n            (scene.cameras[0] as ArcRotateCamera).target.set(cx,2,cy);\r\n            (scene.cameras[0] as ArcRotateCamera).radius = 40;\r\n            \r\n            state.tiles.onAdd = (tile: Tile, key: number) => {\r\n                const [x,y] = getCoords(key, state.width);\r\n                let transformNode  = new TransformNode(`${key}`, scene);\r\n                transformNode.position.set(x, tile.height, y);\r\n                transformNode.metadata = {key};\r\n                let terrainMesh = terrains[tile.terrainType].parentMesh.clone(`tile`, transformNode);\r\n                terrainMesh.position.set(0,0,0);\r\n                terrainMesh.isPickable = true;\r\n                let buildingNode : TransformNode = null;\r\n                let buildingMesh : Mesh = null;\r\n                tile.listen(\"building\", (currentValue, previousValue) => {\r\n                    if (previousValue) {\r\n                        const animation = Animation.CreateAndStartAnimation(\"build\",  buildingNode, \"position.y\", 60, 10, 1, 0);\r\n                        animation.loopAnimation = false;\r\n                        animation.onAnimationEndObservable.add((eventData) => {eventData.target.dispose();});\r\n                    }\r\n                    if (currentValue) {\r\n                        buildingNode = new TransformNode(\"building\", scene);\r\n                        buildingNode.parent = transformNode;\r\n                        buildingMesh = buildings[currentValue.type].parentMesh.clone(`building`, buildingNode);\r\n                        buildingMesh.position.set(0,0,0);\r\n                        const animation = Animation.CreateAndStartAnimation(\"build\", buildingNode, \"position.y\", 60, 10, 0, 1);\r\n                        animation.loopAnimation = false;\r\n                        tile.building.listen(\"rotation\", (currentValue, previousValue) => {\r\n                            buildingNode.rotation.y = tile.building.rotation;\r\n                        })\r\n                        updateTileBorder(tile, transformNode);\r\n                    }\r\n                })\r\n                tile.listen(\"terrainType\", (currentValue, previousValue) => {\r\n                    if (previousValue !== null) {\r\n                        terrainMesh.dispose();\r\n                    }\r\n                    if (currentValue !== null) {\r\n                        terrainMesh = terrains[tile.terrainType].parentMesh.clone(`tile`, transformNode);\r\n                        terrainMesh.position.set(0,0,0);\r\n                        terrainMesh.setEnabled(true);\r\n                        terrainMesh.isPickable = true;\r\n                        updateTileBorder(tile, transformNode);\r\n                    }\r\n                })\r\n                tile.listen(\"height\", (currentValue, previousValue) => {\r\n                    transformNode.position.y = tile.height;\r\n                })\r\n                tile.listen(\"focusing\", () => {\r\n                    updateTileBorder(tile, transformNode);\r\n                });\r\n            }\r\n            scene.onPointerObservable.add((pointerInfo) => {\r\n                let key = -1;\r\n                if (pointerInfo.pickInfo && pointerInfo.pickInfo.pickedMesh) {\r\n                    const mesh = pointerInfo.pickInfo.pickedMesh;\r\n                    let keyNode : Node = mesh;\r\n                    while(!keyNode.metadata || !keyNode.metadata.key) {\r\n                        keyNode = keyNode.parent;\r\n                        if (!keyNode) return;\r\n                    }\r\n                    key = keyNode.metadata.key;\r\n                }\r\n                if (pointerInfo.type === PointerEventTypes.POINTERDOWN) {\r\n                    if (key == -1 || state.tiles[key].focusing.length == 0) {\r\n                        setFocusedKey(key);\r\n                        room.send(\"focus\", {key});\r\n                    }\r\n                } /* else if (buildType != -1) {\r\n                    if (key == -1) {\r\n                        if (buildMesh != null) {\r\n                            buildMesh.dispose();\r\n                            buildMesh = null;\r\n                        }\r\n                    } else {\r\n                        if (buildMesh == null) {\r\n                            const nm = buildings[buildType].buildMesh.clone(\"build\", null);\r\n                            buildMesh = nm;\r\n                        }\r\n                        const [x,y] = getCoords(key, state.width);\r\n                        buildMesh.position.x = x;\r\n                        buildMesh.position.z = y;\r\n                        buildMesh.position.y = state.tiles[key].height;\r\n                        console.log(buildMesh.position.toString())\r\n                    }\r\n                } */\r\n            })\r\n            \r\n        }).catch(e => {\r\n            console.log(\"JOIN ERROR\", e);\r\n        });\r\n    }\r\n    const onSceneReady = (scene : Scene) => {\r\n        loadGameData(scene)\r\n            .then(() => connect(scene));\r\n    \r\n      // This creates and positions a free camera (non-mesh)\r\n        const camera = new ArcRotateCamera(\r\n            \"camera\",\r\n            0,\r\n            Math.PI / 3,\r\n            10,\r\n            new Vector3(0, 0, 0),\r\n            scene\r\n        );\r\n    \r\n      // This targets the camera to scene origin\r\n      camera.setTarget(Vector3.Zero());\r\n    \r\n      const canvas = scene.getEngine().getRenderingCanvas();\r\n    \r\n      // This attaches the camera to the canvas\r\n      camera.attachControl(canvas, true);\r\n    \r\n      // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\r\n      var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\r\n    \r\n      // Default intensity is 1. Let's dim the light a small amount\r\n      light.intensity = 0.7;\r\n    \r\n    };\r\n\r\n    /**\r\n * Will run on every frame render. \r\n */\r\nconst onRender = (scene : Scene) => {};\r\n\r\n  return <div>\r\n    <SceneComponent antialias onSceneReady={onSceneReady} onRender={onRender} id=\"my-canvas\" />\r\n    <TilePanel\r\n        tile={roomState.tiles[focusedKey]}\r\n        demolishBuilding={() => room.send(\"demolish\", {key: focusedKey})}\r\n        buildBuilding={type => room.send(\"build\", {key: focusedKey, type})}\r\n        setTerrainType={type => room.send(\"changeTerrainType\", {key: focusedKey, type})}\r\n        setHeight={height => room.send(\"setHeight\", {key: focusedKey, height})}\r\n        setRotation={rotation => room.send(\"setRotation\", {key: focusedKey, rotation})}\r\n    />\r\n    <Chat\r\n        players={roomState.players}\r\n        sendMessage={(message) => room.send(\"message\", {message})}\r\n        messages={roomState.messages}\r\n    />\r\n    <h1 id=\"world-name\">{roomState.name}</h1>\r\n    {/* <BuildPanel setBuildType={type => buildType = type}/> */}\r\n    <Help/>\r\n  </div>\r\n};\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}